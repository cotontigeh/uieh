---
import { BiMenu, BiMoon, BiSun } from "react-icons/bi";
import { Nav as NavUIEH, NavContainer, NavLink, Sidebar, Backdrop } from "uieh";
import { routes } from "../config/routes";
import { cn } from "uieh/utils";
import type { UiCollectionType } from "../../content.config";
import { getCollection } from "astro:content";

const uiDocs = (await getCollection("ui")) as unknown as UiCollectionType[];
const uiChildrenPath = routes.docs.children.ui.children.elements.to;
const currentPath = Astro.url.pathname;
---

<NavUIEH size="small" color="base" className="h-[60px] lg:hidden" sticky>
  <NavContainer>
    <BiMenu
      size={30}
      className="cursor-pointer select-none"
      id="mobile-menu-open-button"
    />

    {/* Logo */}
    <NavLink
      variant="badge"
      className={cn(
        "text-xl font-bold mr-2 text-base-300-dark dark:text-base-300",
        "border-1 border-base-300 dark:border-base-300-dark"
      )}
      href={routes.home.to}
    >
      UIEH
    </NavLink>

    {/* Theme toggle */}
    <div id="themeToggleMobile" class="ml-auto cursor-pointer select-none">
      <BiMoon className="dark:hidden" size={22} />
      <BiSun className="hidden dark:block" size={22} />
    </div>
  </NavContainer>
</NavUIEH>

<Sidebar variant="fly" id="mobile-sidebar">
  <NavLink
    fullWidth
    variant="badge"
    active={Astro.url.pathname === routes.home.to}
    href={routes.home.to}
  >
    {routes.home.name}
  </NavLink>
  <NavLink
    fullWidth
    variant="badge"
    color="secondary"
    active={Astro.url.pathname.includes(routes.docs.to)}
    href={routes.docs.to}
  >
    {routes.docs.name}
  </NavLink>

  {
    Astro.url.pathname.includes(routes.docs.to) ? (
      <>
        <NavLink
          fullWidth
          href={routes.docs.to}
          active={Astro.url.pathname === routes.docs.to}
        >
          Getting Started
        </NavLink>

        <NavLink
          fullWidth
          href={routes.docs.children.ui.to}
          active={Astro.url.pathname.includes("/docs/ui")}
        >
          {routes.docs.children.ui.name}
        </NavLink>
        <div class="pl-4">
          <div class="border-l border-base-100-dark/10 dark:border-base-100/10 w-full">
            {uiDocs?.map((doc) => (
              <NavLink
                key={doc.id}
                fullWidth
                href={uiChildrenPath.replace(":element", doc.slug)}
                className={cn(
                  "border-l border-transparent",
                  "hover:border-base-100-dark dark:hover:border-base-100",
                  currentPath === uiChildrenPath.replace(":element", doc.slug)
                    ? "border-base-100-dark dark:border-base-100"
                    : undefined
                )}
                active={
                  currentPath === uiChildrenPath.replace(":element", doc.slug)
                }
              >
                {doc.data.title}
              </NavLink>
            ))}
          </div>
        </div>
      </>
    ) : null
  }
</Sidebar>

<Backdrop className="lg:hidden" id="mobile-backdrop" />

<script is:inline>
  // Handle mobile sidebar toggle
  const menuOpenButton = document.getElementById("mobile-menu-open-button");
  const sidebar = document.getElementById("mobile-sidebar");
  const backdrop = document.getElementById("mobile-backdrop");

  function openSidebar() {
    sidebar.classList.add("left-0");
    backdrop.classList.remove("hidden");
    backdrop.classList.add("block");
  }

  function closeSidebar() {
    sidebar.classList.remove("left-0");
    backdrop.classList.add("hidden");
    backdrop.classList.remove("block");
  }

  // Open sidebar when menu button is clicked
  menuOpenButton?.addEventListener("click", openSidebar);

  // Close sidebar when backdrop is clicked
  backdrop?.addEventListener("click", closeSidebar);

  // Close sidebar when pressing Escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape") {
      closeSidebar();
    }
  });
</script>
